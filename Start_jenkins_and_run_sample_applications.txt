This file guides you on installtion of Jenkins on your Windows machine, creating a sample CI/CD pipeline for a Python project, and implementing Docker. 

### Step 1: Install Java on Windows
1. **Download the JDK:**
   - Visit the [Oracle JDK download page](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html).
   - Download the installer for the latest version of JDK (Java Development Kit).

2. **Install Java:**
   - Run the installer and follow the on-screen instructions to install Java.
   - Once installed, you’ll need to set the `JAVA_HOME` environment variable:
     - Right-click on `This PC` or `My Computer` and select `Properties`.
     - Click on `Advanced system settings`, then click on `Environment Variables`.
     - Under `System Variables`, click `New` and add:
       - **Variable Name:** `JAVA_HOME`
       - **Variable Value:** `C:\Program Files\Java\jdk-<version>` (replace `<version>` with the correct path to your JDK installation).
     - Find the `Path` variable under `System Variables`, click `Edit`, and add `%JAVA_HOME%\bin` to the list.

3. **Verify Installation:**
   - Open Command Prompt and type `java -version` to verify that Java is installed correctly.

### Step 2: Install Jenkins on Windows

1. **Download Jenkins:**
   - Go to the [Jenkins official download page](https://www.jenkins.io/download/) and download the Windows installer (`.msi` file).

2. **Install Jenkins:**
   - Run the Jenkins installer.
   - Choose the installation directory (default is fine) and continue.
   - When prompted, ensure Jenkins is installed as a Windows service.
   - During the setup, Jenkins will automatically detect the Java installation.

3. **Access Jenkins:**
   - After installation, Jenkins will start automatically.
   - Open a web browser and go to `http://localhost:8080`.
   - You'll see the Jenkins unlock screen. To proceed:
     - Go to `C:\Program Files (x86)\Jenkins\secrets\initialAdminPassword`.
     - Copy the password from this file and paste it into the Jenkins unlock screen.

4. **Set Up Jenkins:**
   - Install the suggested plugins.
   - Create your first admin user.
   - Once completed, you’ll be taken to the Jenkins dashboard.

### Step 3: Set Up a Python Project in Jenkins

#### 1. Create a Simple Python Project
1. **Create a Project Directory:**
   - Create a new folder on your machine for your Python project, e.g., `C:\Projects\jenkins-python-demo`.
   - Inside this folder, create a Python script `main.py`:
     ```python
     # main.py
     def hello_world():
         return "Hello, Jenkins!"

     if __name__ == "__main__":
         print(hello_world())
     ```

2. **Create a Virtual Environment:**
   - Open Command Prompt and navigate to your project directory:
     ```sh
     cd C:\Projects\jenkins-python-demo
     ```
   - Create a virtual environment:
     ```sh
     python -m venv venv
     ```
   - Activate the virtual environment:
     ```sh
     venv\Scripts\activate
     ```

3. **Install Dependencies:**
   - Create a `requirements.txt` file in your project folder:
     ```
     # requirements.txt
     pytest
     ```
   - Install the dependencies:
     ```sh
     pip install -r requirements.txt
     ```

4. **Create a Simple Test:**
   - Create a `test_main.py` file:
     ```python
     # test_main.py
     from main import hello_world

     def test_hello_world():
         assert hello_world() == "Hello, Jenkins!"
     ```

#### 2. Create a Jenkins Pipeline for Your Python Project

1. **Create a New Pipeline Job:**
   - In Jenkins, click on `New Item`.
   - Enter a name for your job, e.g., `PythonPipeline`, select `Pipeline`, and click `OK`.

2. **Define the Pipeline Script:**
   - Scroll down to the "Pipeline" section and choose "Pipeline script."
   - Enter the following script:
     ```groovy
     pipeline {
         agent any

         stages {
             stage('Clone Repository') {
                 steps {
                     git 'https://github.com/yourusername/jenkins-python-demo.git'
                 }
             }
             stage('Setup Python Environment') {
                 steps {
                     sh '''
                     python -m venv venv
                     . venv/Scripts/activate
                     pip install -r requirements.txt
                     '''
                 }
             }
             stage('Run Tests') {
                 steps {
                     sh '''
                     . venv/Scripts/activate
                     pytest
                     '''
                 }
             }
         }
     }
     ```

3. **Run the Pipeline:**
   - Save the job and click `Build Now`.
   - Jenkins will clone the repository, set up the Python environment, and run the tests.

### Step 4: Implement Docker

#### 1. Install Docker on Windows
1. **Download Docker Desktop:**
   - Visit the [Docker Desktop download page](https://www.docker.com/products/docker-desktop) and download the installer.

2. **Install Docker Desktop:**
   - Run the installer and follow the instructions.
   - After installation, start Docker Desktop.

3. **Verify Docker Installation:**
   - Open Command Prompt and type `docker --version` to check if Docker is installed.

#### 2. Create a Dockerfile for Your Python Project

1. **Create a `Dockerfile`:**
   - In your project directory, create a `Dockerfile`:
     ```Dockerfile
     # Use an official Python runtime as a parent image
     FROM python:3.8-slim

     # Set the working directory in the container
     WORKDIR /app

     # Copy the current directory contents into the container at /app
     COPY . /app

     # Install any needed packages specified in requirements.txt
     RUN pip install --no-cache-dir -r requirements.txt

     # Run pytest when the container launches
     CMD ["pytest"]
     ```

2. **Build the Docker Image:**
   - Open Command Prompt, navigate to your project directory, and build the Docker image:
     ```sh
     docker build -t jenkins-python-demo .
     ```

3. **Run the Docker Container:**
   - Run the container:
     ```sh
     docker run jenkins-python-demo
     ```

   This command will execute your tests inside a Docker container.

#### 3. Integrate Docker with Jenkins

1. **Update Jenkins Pipeline:**
   - Modify your Jenkins pipeline to use Docker:
     ```groovy
     pipeline {
         agent any

         stages {
             stage('Clone Repository') {
                 steps {
                     git 'https://github.com/yourusername/jenkins-python-demo.git'
                 }
             }
             stage('Build Docker Image') {
                 steps {
                     script {
                         docker.build('jenkins-python-demo')
                     }
                 }
             }
             stage('Run Tests in Docker') {
                 steps {
                     script {
                         docker.image('jenkins-python-demo').inside {
                             sh 'pytest'
                         }
                     }
                 }
             }
         }
     }
     ```

2. **Run the Updated Pipeline:**
   - Save the changes and click `Build Now` in Jenkins to run the updated pipeline.

### Step 5: Validate Everything
- Ensure that all steps in Jenkins, including building the Docker image and running tests, execute successfully.
- Check the Jenkins console output to verify the correct execution.

This setup should give you a solid foundation for using Jenkins with Python projects and Docker integration.

